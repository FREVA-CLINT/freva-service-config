#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

temp_dir=$(mktemp -d)
trap "rm -rf '$temp_dir'" EXIT

export SERVICE=nginx

# Download mime.types if not present
if [ ! -f "$CONFIG_DIR/mime.types" ]; then
    curl -sSL https://raw.githubusercontent.com/nginx/nginx/master/conf/mime.types \
        -o "$CONFIG_DIR/mime.types"
fi

favicon(){
    local fill_color="${1:-#f44336}"
    cat << EOF
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.2" baseProfile="tiny" id="black" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
	 x="0px" y="0px" viewBox="0 0 256 256" overflow="visible" xml:space="preserve">
<g>
	<path
    style="fill:$fill_color"
    d="M251.5,61.3c-1.1-7.1-2.3-13.6-3.4-19.3c-3-14.8-14.5-26.3-29.3-29.3c-5.7-1.1-12.2-2.3-19.3-3.4l1.9,50.1L251.5,61.3z"/>
	<circle
    style="fill:$fill_color"
    cx="123.8" cy="121.9" r="15.5"/>
	<path
    style="fill:$fill_color"
    d="M253.8,78.7l-10.5-0.4l-58.7-2.2l-2.2-58.7L182,6.9c-18-2-38.3-3-58.7-1.5C102.1,7,80.8,11.3,62.2,20c0,0,0,0,0,0
		c-16.4,6.4-30,17.6-39.3,32.1c0,0,0,0,0,0C16.8,60.7,12,70.2,8.3,80.3c-19.4,53.1-3.2,105.6,31,140.2c-3.9-31.1,0.4-69.4,6.4-90.3
		c5.9-20.5,27.1-60.4,60.4-60.4h0.7c6.3,0,12.8,1.1,19,3.1c1.1,0.4,2.3,0.8,3.4,1.2c23,8.7,42.2,29.3,40.3,49.9
		c-0.2,2.6,0.9,5.2,3,6.8c10,7.5,25.5,19.9,34.3,31.3c2.3,3-0.9,7.1-4.4,5.7c-5.6-2.3-13.1-5.3-21-8.3c-17.3-5.3-30.3-4.2-38.5,0.1
		C130.6,173.3,121.3,196,169,256c3.8-1,7.6-2.2,11.4-3.6c10.1-3.7,19.6-8.5,28.1-14.6c0,0,0,0,0,0c14.5-9.3,25.8-23,32.1-39.3
		c8.8-18.6,13-39.9,14.6-61.1C256.8,117,255.8,96.7,253.8,78.7z"/>
</g>
</svg>
EOF

}

# Helper to render a Jinja2 template using python -c
render_template() {
  local template_path="$1"
  local output_path="$2"

  python3 -c "
import os, sys
from jinja2 import Environment, FileSystemLoader

template_path = sys.argv[1]
output_path = sys.argv[2]
env = Environment(loader=FileSystemLoader(os.path.dirname(template_path)))
template = env.get_template(os.path.basename(template_path))
with open(output_path, 'w') as f:
    f.write(template.render(env=os.environ))
" "$template_path" "$output_path"
}

# Set defaults if not explicitly provided
export SERVER_ROOT="${SERVER_ROOT:-$CONFIG_DIR}"
export FREVA_REST_HOST="${FREVA_REST_HOST:-localhost}"
export CHATBOT_HOST="${CHATBOT_HOST:-localhost}"
export SERVER_NAME="${WEB_SERVER_NAME:-localhost}"
export SERVER_PORT="${WEB_SERVER_PORT:-8000}"
export SERVER_CERT_FILE="${SERVER_CERT_FILE:-${temp_dir}/fullchain.pem}"
export SERVER_KEY_FILE="${SERVER_KEY_FILE:-${temp_dir}/privkey.pem}"
export FILL_COLOR="${FILL_COLOR:-#f44336}"
export PROJECT_NAME="${PROJECT_NAME:-freva}"
export WEB_HOST=${WEB_HOST:-localhost}
export TEMP_DIR=${temp_dir}
SERVER_CERT="${SERVER_CERT:-}"
SERVER_KEY="${SERVER_KEY:-}"

# Create or decode SSL certs
if [ ! -f "$SERVER_CERT_FILE" ] || [ ! -f "$SERVER_KEY_FILE" ]; then
    if [ -z "$SERVER_CERT" ] || [ -z "$SERVER_KEY" ]; then
        echo "⚠️  Generating self-signed SSL certificate"
        openssl req -x509 -nodes -days 365 \
            -newkey rsa:2048 \
            -keyout "$SERVER_KEY_FILE" \
            -out "$SERVER_CERT_FILE" \
            -subj "/CN=$(hostname)" &>/dev/null
    else
        echo "$SERVER_CERT" | base64 --decode > "$SERVER_CERT_FILE"
        echo "$SERVER_KEY" | base64 --decode > "$SERVER_KEY_FILE"
    fi
fi
SHA512=$(sha512sum $SERVER_CERT_FILE| awk '{print $1}')
export VAULT_URL=http://${VAULT_HOST:-localhost:5002}/vault/data/${SHA512}

# Decide which config to render
favicon $FILL_COLOR > $TEMP_DIR/favicon.svg
mkdir -p "$temp_dir/nginx/"{proxy_temp,client_temp,fastcgi_temp,uwsgi_temp,scgi_temp}
cp $CONFIG_DIR/outoforder.html $TEMP_DIR
render_template "$CONFIG_DIR/nginx.j2" "$temp_dir/nginx.conf"
touch "$LOG_DIR/nginx-error.log" "$LOG_DIR/nginx-access.log"
chmod -R 1777 $temp_dir $LOG_DIR/*.log
# Start Nginx
exec nginx -e "$LOG_DIR/nginx-error.log" -p "$temp_dir" -c "$temp_dir/nginx.conf" -g "daemon off;"
